
= ProxyFS

Creates a proxy filesystem using fuse for ruby to mount a mirror of a local directory.
Using the proxy mountpoint, changes to the files will be distributed *live* to remote mirrors automatically using the SFTP protocol.
ProxyFS manages a log for each mirror, to re-sync a lost mirror when it is available again.
If a host goes down, ProxyFS will save what it would send to the host if it would be online within its logs.
When the host comes up again, ProxyFS remembers what it should send to the host to let the host resync.
Nothing gets lost.

== State (Warning!)

This is an early alpha. Currently it's more like a proof of concept than usable. You better don't use it yet.
It will possibly delete all your files :-)

Currently, we use mysql for logging. Therefore, you'll have to install a mysql server or other ACID database supported by active record.

Please note, that you need space within the tmp/log directory, 
because each file is temporary written to the log directory and stored until it is replicated to each mirror.

== Install

Currently only Debian supported (within this README).

1. Install dependencies

   $ apt-get install fuse ruby irb libfusefs-ruby libnet-sftp2-ruby libmysql-ruby
   $ apt-get install libactionmailer-ruby1.8 libactiverecord-ruby1.8 mysql-server

2. Setup Fuse

   $ modprobe fuse

3. Edit config/database.rb for mysql settings (logging).
4. Edit config/mailer.rb for email notifications. ProxyFS will send an email for every serious error.
5. To setup the database tables, run from the ProxyFS root directory as root (the database must already exist):

   $ ruby database.rb

6. The ProxyFS console

   ProxyFS has a gread management tool, the ProxyFS console. 
   To start the ProxyFS console, run as root:

     $ irb -r console.rb

   Within the console, enter +show_help+ and press enter.
   Currently, the following commands are supported:

     $ irb -r console.rb
     > show_help
     show_help - shows this screen
     show_status - shows a status of your mirrors
     show_tasks - lists open tasks for all hosts
     show_tasks '[hostname]' - lists open tasks for host
     add_mirror '[hostname]', '[username]', '[base_path]' - add the mirror to the list
     remove_mirror '[hostname]' - remove mirror from the list
     try_again '[hostname]' - triggers a retry of erroneous tasks on the host
     kill_now - kill the daemon gracefully

   To exit from the console, enter +quit+.

7. Add mirrors

   From the console, you can add mirrors.

     $ irb -r console.rb
     > add_mirror 'example.com', 'mirror_user', '/path/to/destination' 

8. Startup

   After you've added your mirrors, start the daemon.
   Run as root:

     $ ruby proxyfs.rb [local path] [mount point]

9. Shutdown

   If you want to kill ProxyFS, please use the console as well to let ProxyFS exit gracefully.

     $ irb -r console.rb
     > kill_now

10. Init Scripts

    To create an init script, you can as well kill the daemon gracefully by running:

      $ kill -s SIGTERM [pid]

    The pid is stored in /path/to/proxyfs/tmp/proxyfs.pid

== Use Cases

Say you have multiple webservers and directories with a large collection of rather static files.
You want both servers to have the same content within these directories.

Now, you have multiple options to replicate/synchronize these directories

* rsync, running once a hour, day, week, whatever

Unfortunately, rsync can't replicate/synchronize the files in a +live+ manner.

* drbd

Unfortunately, drbd will only work in a LAN using gigabit links (AFAIK).

* lsyncd or other inotify based replication/synchronization tools

Unfortunately, these tools can IMHO get out of sync easily or have to continously run rsync to stay in sync.
This behaviour is bad if you have to replicate/synchronize thousands of files and hundreds of gigabytes of data.

* *ProxyFS*

Will be more robust, because a write to the proxy mountpoint will automatically sync to all mirrors and a local directory live.
Is designed for WAN connections! Only the local write is synchronous, remote writes are asynchronous.
After a network outage, ProxyFS will use its log to replicate the not yet written operations to the mirrors again.
Therefore, mirrors can get down and will resync when they get available again.
ProxyFS assumes to be all mirrors in sync when it starts. Therfore, you'll have to initially use rsync one time, for example.


