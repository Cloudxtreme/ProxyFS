
= ProxyFS

Creates a proxy filesystem using fuse for ruby to mount a mirror of a local directory.
Using the proxy mountpoint, changes to the files will be distributed *live* to remote mirrors automatically using the SFTP protocol.
ProxyFS manages a log for each mirror, to re-sync a lost mirror when it is available again.
If a host goes down, ProxyFS will save what it would send to the host if it would be online within its logs.
When the host comes up again, ProxyFS remembers what it should send to the host to let the host resync.
Nothing gets lost. Everything happens in correct order.

== State (Warning!)

This is an early alpha. Currently it's more like a proof of concept than usable. You better don't use it yet.
It will possibly delete all your files :-)

Currently, we use mysql for logging. Therefore, you'll have to install a mysql server or other ACID database supported by +ActiveRecord+.

== Install

1. Install dependencies

   On debian machines install dependencies like shown above:

     $ apt-get install fuse ruby irb libfusefs-ruby libnet-sftp2-ruby libmysql-ruby
     $ apt-get install libactionmailer-ruby1.8 libactiverecord-ruby1.8 mysql-server

2. Setup Fuse

   Enable the fuse kernel module:

     $ modprobe fuse

3. Database config

   To let ProxyFS do logging, create a database for proxyfs:

     $ mysqladmin create proxyfs
 
   Edit <tt>config/database.rb</tt> to let ProxyFS connect to your database.
   Afterwards, run as root from the ProxyFS root directory:

     $ ruby database.rb

4. Email config

   Edit <tt>config/mailer.rb</tt> for email notifications.
   ProxyFS will send an email for every serious error.

5. The ProxyFS console

   ProxyFS has a great management tool, the ProxyFS console. 
   To start the ProxyFS console, run as root:

     $ irb -r console.rb

   Within the console, enter +show_help+ and press enter.
   Currently, the following commands are supported:

     $ irb -r console.rb
     > show_help
     show_help - shows this screen
     show_status - shows a status of your mirrors
     show_tasks - lists open tasks for all hosts
     show_tasks '[hostname]' - lists open tasks for host
     add_mirror '[hostname]', '[username]', '[base_path]' - add the mirror to the list
     remove_mirror '[hostname]' - remove mirror from the list
     try_again '[hostname]' - triggers a retry of erroneous tasks on the host
     kill_now - kill the daemon gracefully

   To exit from the console, enter +quit+.

6. Add mirrors

   From the console, add mirrors:

     $ irb -r console.rb
     > add_mirror 'example.com', 'mirror_user', '/path/to/destination' 

   Right now, only key based authentication is supported.

7. Startup

   After you've added your mirrors, start the daemon.
   Run as root from the ProxyFS root directory:

     $ ruby proxyfs.rb [local path] [mount point]

8. Shutdown

   If you want to kill ProxyFS, please use the console as well to let ProxyFS exit gracefully.

     $ irb -r console.rb
     > kill_now

9. Init Scripts

   To create an init script, you can as well kill the daemon gracefully by running:

     $ kill -s SIGTERM [pid]

   The pid is stored in <tt>/path/to/proxyfs/tmp/proxyfs.pid</tt>

== Use Cases

Say you have multiple webservers and directories with a large collection of rather static files.
You want both servers to have the same content within these directories.

Now, you have multiple options to replicate/synchronize these directories

* rsync

Batch replication running once a hour, day, week, whatever is a very good thing.
Unfortunately, rsync can't replicate/synchronize the files in a +live+ manner and has to scan the full mirror for changes.
This is not optimal for thousands of large files, because rsync has to calculate the differences of the mirrors each time.

* drbd

AKA raid1 over network.
Unfortunately, drbd will only work/is recommended in a LAN setup using gigabit links (AFAIK).

* lsyncd

Unfortunately, inotify based replication can IMHO get out of sync easily or has to continously run rsync to stay in sync.
This behaviour is bad if you have to replicate/synchronize thousands of files and hundreds of gigabytes of data together
with more or less frequent connection interruptions.

* XtreemFS

IMHO XtreemFS provides a similar approach to ProxyFS. Looks a bit full blown.

* GlusterFS

GlusterFS's geo-replication feature seems to be promising.

* *ProxyFS*

Will be more robust, because a write to the proxy mountpoint will automatically sync to all mirrors and a local directory *live*.
ProxyFS is designed for WAN connections. Only the local write is synchronous, remote writes are asynchronous.
After a network outage, ProxyFS will use its log to replicate the not yet written operations to the mirrors again.
Therefore, mirrors can get down and will resync when they get available again.
ProxyFS assumes to be all mirrors in sync when it starts.
Therefore, you'll have to initially use rsync one time, if you don't start with empty directories.

== Caveats

ProxyFS is good for replicating rather static files (e.g. image, video or other media files), 
but not that good for files that change very frequently (e.g. multiple times every hour or minute).
Therefore, you better don't use it for replicating log files still in use, for example.

Don't do any writes to the replicated directories on the mirrors directly, i.e. circumventing ProxyFS.
If you write directly on a mirror to the replicated directories, ProxyFS can of course not keep the directories synchronized.

ProxyFS does not exactly behave <em>as usual</em> filesystems in a few ways:

* +touch+ is not yet supported.

    touch test.txt

  will not work, because SFTP does not offer +touch+.
  SFTP offers the manipulation of <tt>file attributes</tt> and ProxyFS will possibly use this feature in the future.

* A file's timestamp will be different on each mirror, because ProxyFS does not mind, yet.
  The timestamp will be equal to the time of transfer on each mirror. 
  Possibly, this behaviour will change in the future, when SFTP <tt>file attribute</tt> manipulation will be used by ProxyFS.

* +mv+ will remove the file and re-create it for the new name.

* +mv+ for directories won't work.

